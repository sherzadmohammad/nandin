import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:nanden/utils/toast.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:path/path.dart' as path;

import '../../models/meal_data.dart';
import '../../services/post_service.dart';

class CreatePostScreen extends StatefulWidget {
  const CreatePostScreen({super.key});

  @override
  State<CreatePostScreen> createState() => _CreatePostScreenState();
}

class _CreatePostScreenState extends State<CreatePostScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _cuisineController = TextEditingController();
  final _durationController = TextEditingController();
  final _tagController = TextEditingController();
  
  String _complexity = 'Easy';
  String _affordability = 'Budget';
  File? _imageFile;
  String? _videoUrl;
  
  List<String> _ingredients = [];
  List<String> _steps = [];
  List<String> _tags = [];
  
  final _ingredientController = TextEditingController();
  final _stepController = TextEditingController();
  
  bool _isLoading = false;
  
  final PostService _postService = PostService();

  @override
  void dispose() {
    _titleController.dispose();
    _cuisineController.dispose();
    _durationController.dispose();
    _tagController.dispose();
    _ingredientController.dispose();
    _stepController.dispose();
    super.dispose();
  }

  Future<void> _pickImage() async {
    final picker = ImagePicker();
    final pickedFile = await picker.pickImage(source: ImageSource.gallery);

    if (pickedFile != null) {
      setState(() {
        _imageFile = File(pickedFile.path);
      });
    }
  }

  Future<String?> _uploadImage() async {
    if (_imageFile == null) return null;

    try {
      final fileName = '${DateTime.now().millisecondsSinceEpoch}_${path.basename(_imageFile!.path)}';
      
      await Supabase.instance.client.storage.from('post_images').upload(fileName, _imageFile!);
      
      // Get the public URL
      final imageUrl = Supabase.instance.client.storage
          .from('post_images')
          .getPublicUrl(fileName);
          
      return imageUrl;
    } catch (e) {
      if(mounted){
        showToast(context: context, message: 'Failed to upload image: $e');
      }
      return null;
    }
  }

  void _addIngredient() {
    final ingredient = _ingredientController.text.trim();
    if (ingredient.isNotEmpty) {
      setState(() {
        _ingredients.add(ingredient);
        _ingredientController.clear();
      });
    }
  }

  void _addStep() {
    final step = _stepController.text.trim();
    if (step.isNotEmpty) {
      setState(() {
        _steps.add(step);
        _stepController.clear();
      });
    }
  }

  void _addTag() {
    final tag = _tagController.text.trim();
    if (tag.isNotEmpty) {
      setState(() {
        _tags.add(tag);
        _tagController.clear();
      });
    }
  }

  Future<void> _submitForm() async {
    if (!_formKey.currentState!.validate()) return;
    if (_imageFile == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please select an image')),
      );
      return;
    }
    
    if (_ingredients.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please add at least one ingredient')),
      );
      return;
    }
    
    if (_steps.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please add at least one step')),
      );
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      // Upload image
      final imageUrl = await _uploadImage();
      if (imageUrl == null) {
        setState(() {
          _isLoading = false;
        });
        return;
      }

      // Create post object
      final newPost = Post(
        id: '', // Will be generated by Supabase
        userId: Supabase.instance.client.auth.currentUser!.id,
        title: _titleController.text,
        imageUrl: imageUrl,
        videoUrl: _videoUrl,
        ingredients: _ingredients,
        steps: _steps,
        duration: int.parse(_durationController.text),
        complexity: _complexity,
        affordability: _affordability,
        likeCount: 0,
        commentCount: 0,
        savedBy: [],
        cuisine: _cuisineController.text,
        timestamp: DateTime.now(),
        isPublic: true,
      );

      // Save to database
      await _postService.createPost(newPost, _tags);

      // Navigate back or show success message
      if (mounted) {
        Navigator.of(context).pop();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Post created successfully!')),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to create post: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Create New Recipe'),
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Form(
              key: _formKey,
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    // Image picker
                    GestureDetector(
                      onTap: _pickImage,
                      child: Container(
                        height: 200,
                        decoration: BoxDecoration(
                          color: Colors.grey[200],
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: _imageFile != null
                            ? ClipRRect(
                                borderRadius: BorderRadius.circular(8),
                                child: Image.file(
                                  _imageFile!,
                                  fit: BoxFit.cover,
                                ),
                              )
                            : const Center(
                                child: Icon(
                                  Icons.add_a_photo,
                                  size: 50,
                                  color: Colors.grey,
                                ),
                              ),
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Title
                    TextFormField(
                      controller: _titleController,
                      decoration: const InputDecoration(
                        labelText: 'Recipe Title',
                        border: OutlineInputBorder(),
                      ),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please enter a title';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 16),

                    // Cuisine
                    TextFormField(
                      controller: _cuisineController,
                      decoration: const InputDecoration(
                        labelText: 'Cuisine',
                        border: OutlineInputBorder(),
                      ),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please enter a cuisine';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 16),

                    // Duration
                    TextFormField(
                      controller: _durationController,
                      decoration: const InputDecoration(
                        labelText: 'Duration (minutes)',
                        border: OutlineInputBorder(),
                      ),
                      keyboardType: TextInputType.number,
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please enter duration';
                        }
                        if (int.tryParse(value) == null) {
                          return 'Please enter a valid number';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 16),

                    // Complexity dropdown
                    DropdownButtonFormField<String>(
                      value: _complexity,
                      decoration: const InputDecoration(
                        labelText: 'Complexity',
                        border: OutlineInputBorder(),
                      ),
                      items: ['Easy', 'Medium', 'Hard']
                          .map((complexity) => DropdownMenuItem(
                                value: complexity,
                                child: Text(complexity),
                              ))
                          .toList(),
                      onChanged: (value) {
                        if (value != null) {
                          setState(() {
                            _complexity = value;
                          });
                        }
                      },
                    ),
                    const SizedBox(height: 16),

                    // Affordability dropdown
                    DropdownButtonFormField<String>(
                      value: _affordability,
                      decoration: const InputDecoration(
                        labelText: 'Affordability',
                        border: OutlineInputBorder(),
                      ),
                      items: ['Budget', 'Moderate', 'Expensive']
                          .map((affordability) => DropdownMenuItem(
                                value: affordability,
                                child: Text(affordability),
                              ))
                          .toList(),
                      onChanged: (value) {
                        if (value != null) {
                          setState(() {
                            _affordability = value;
                          });
                        }
                      },
                    ),
                    const SizedBox(height: 24),

                    // Ingredients section
                    const Text(
                      'Ingredients',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Row(
                      children: [
                        Expanded(
                          child: TextFormField(
                            controller: _ingredientController,
                            decoration: const InputDecoration(
                              hintText: 'Add ingredient',
                              border: OutlineInputBorder(),
                            ),
                          ),
                        ),
                        const SizedBox(width: 8),
                        IconButton(
                          onPressed: _addIngredient,
                          icon: const Icon(Icons.add),
                          color: Theme.of(context).primaryColor,
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    _buildChipList(_ingredients, (index) {
                      setState(() {
                        _ingredients.removeAt(index);
                      });
                    }),
                    const SizedBox(height: 24),

                    // Steps section
                    const Text(
                      'Steps',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Row(
                      children: [
                        Expanded(
                          child: TextFormField(
                            controller: _stepController,
                            decoration: const InputDecoration(
                              hintText: 'Add step',
                              border: OutlineInputBorder(),
                            ),
                            maxLines: 2,
                          ),
                        ),
                        const SizedBox(width: 8),
                        IconButton(
                          onPressed: _addStep,
                          icon: const Icon(Icons.add),
                          color: Theme.of(context).primaryColor,
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    _buildStepsList(),
                    const SizedBox(height: 24),

                    // Tags section
                    const Text(
                      'Tags',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Row(
                      children: [
                        Expanded(
                          child: TextFormField(
                            controller: _tagController,
                            decoration: const InputDecoration(
                              hintText: 'Add tag',
                              border: OutlineInputBorder(),
                            ),
                          ),
                        ),
                        const SizedBox(width: 8),
                        IconButton(
                          onPressed: _addTag,
                          icon: const Icon(Icons.add),
                          color: Theme.of(context).primaryColor,
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    _buildChipList(_tags, (index) {
                      setState(() {
                        _tags.removeAt(index);
                      });
                    }),
                    const SizedBox(height: 32),

                    // Submit button
                    ElevatedButton(
                      onPressed: _submitForm,
                      style: ElevatedButton.styleFrom(
                        padding: const EdgeInsets.symmetric(vertical: 16),
                      ),
                      child: const Text(
                        'Create Recipe',
                        style: TextStyle(fontSize: 16),
                      ),
                    ),
                  ],
                ),
              ),
            ),
    );
  }

  Widget _buildChipList(List<String> items, Function(int) onDelete) {
    return Wrap(
      spacing: 8,
      children: List.generate(
        items.length,
        (index) => Chip(
          label: Text(items[index]),
          deleteIcon: const Icon(Icons.close, size: 18),
          onDeleted: () => onDelete(index),
        ),
      ),
    );
  }

  Widget _buildStepsList() {
    return ListView.builder(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      itemCount: _steps.length,
      itemBuilder: (context, index) {
        return Card(
          margin: const EdgeInsets.symmetric(vertical: 4),
          child: ListTile(
            leading: CircleAvatar(
              child: Text('${index + 1}'),
            ),
            title: Text(_steps[index]),
            trailing: IconButton(
              icon: const Icon(Icons.delete),
              onPressed: () {
                setState(() {
                  _steps.removeAt(index);
                });
              },
            ),
          ),
        );
      },
    );
  }
}